name: Pull Request Config 🤖

permissions:
  issues: write
  pull-requests: write

on:
  workflow_dispatch:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  review_checklist:
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    name: Comment PR with the Review Checklist
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          comment_includes: 'Review Checklist'
          message: |
            ### Review Checklist

            Hello reviewers! :wave: Please follow this checklist when reviewing this Pull Request.

            #### General
            - [ ] Ensure that the Pull Request has a descriptive title.
            - [ ] If this is a change that users need to know about, please apply the `release notes (needs details)` label so that merging is blocked unless the summary release notes document is included.
            - [ ] If a new flag is being introduced, review whether it is really needed. The flag names should be clear and intuitive (as far as possible), and the flag's help should be descriptive.
            - [ ] If a workflow is added or modified, each items in `Jobs` should be named in order to mark it as `required`. If the workflow should be required, the GitHub Admin should be notified.

            #### Bug fixes
            - [ ] There should be at least one unit or end-to-end test.
            - [ ] The Pull Request description should either include a link to an issue that describes the bug OR an actual description of the bug and how to reproduce, along with a description of the fix.

            #### Non-trivial changes
            - [ ] There should be some code comments as to why things are implemented the way they are.

            #### New/Existing features
            - [ ] Should be documented, either by modifying the existing documentation or creating new documentation.
            - [ ] New features should have a link to a feature request issue or an RFC that documents the use cases, corner cases and test cases.

            #### Backward compatibility
            - [ ] Protobuf changes should be wire-compatible.
            - [ ] Changes to `_vt` tables and RPCs need to be backward compatible.
            - [ ] `vtctl` command output order should be stable and `awk`-able.

          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  auto-assign:
    uses: devxp-tech/.github/.github/workflows/auto-assign.yaml@main
    secrets: inherit
    with:
      assignees: diegoluisi
      numOfAssignee: 1

  triage:
    runs-on: ubuntu-latest
    steps:
      - name: Label PRs
        uses: ffittschen/pr-branch-labeler@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Label Chart
        uses: actions/labeler@v5
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          sync-labels: true

  helm-diff:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
    - name: Checkout main branch 🛎️
      uses: actions/checkout@v4
      with:
        ref: main
        path: main_branch

    - name: Generate Results from Main
      run: |
        helm template main_branch/charts/devxp-app/ -f main_branch/charts/devxp-app/values-ci.yaml > result.yaml
        ls -l result.yaml # Debugging: List the result.yaml file to confirm its creation

    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        path: pr_branch

    - name: Run helm template on PR branch
      run: |
        helm template pr_branch/charts/devxp-app/ -f pr_branch/charts/devxp-app/values-ci.yaml > result_new.yaml
        ls -l result_new.yaml # Debugging: List the result_new.yaml file to confirm its creation

    - name: Diff
      continue-on-error: true
      run: |
        diff --side-by-side --suppress-common-lines --ignore-space-change result.yaml result_new.yaml > diff.yaml || echo "Differences found"

    - name: Comment diff on PR
      if: success()
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        path: diff.yaml
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}